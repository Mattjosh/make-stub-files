
# A configuration file to make stubs for make_stub_files.py itself.

[Global]

files: make_stub_files.py
    
output_directory: .
    
prefix_lines:
    from typing import Any, Dict, Optional, Sequence, Tuple, Union
    # At present, I don't understand how to tell mypy about ast.Node
    # import ast
    # Node = ast.Node
    Node = Any

[Def Name Patterns]

AstFormatter.*: str
Pattern.all_matches: Sequence
Pattern.full_balanced_match: Optional[int]
Pattern.match_balanced: int
Pattern.match_entire_string: bool
StandAloneMakeStubFile.scan_types: Dict[str, str]
StubFormatter.do_.*: str
StubTraverser.format_returns: str
StubTraverser.match_return_patterns: Tuple[bool,str]
StubTraverser.match_return_pattern: Optional[str]
StubTraverser.match_balanced: int

[Arg Patterns]

# Default patterns should *only* appear here.
# Use [Def Name Patterns] to set default return types.

# Without the .* default, -w generates warnings for:
# delim, find_f, fn, name, pattern, repl_s, section_name

patterns: Sequence
trace: bool
controller: StandAloneMakeStubFile
parser: optparse.OptionParser
### .*: str

[General Patterns]

a: str
aList: Sequence

fn: str
\bi[0-3]?\b: int

node: Node
\bs[0-3]?\b: str
strict: bool

# Guido
group: str
ndots: int
os.sep.join(*): str

[Pre Return Patterns]

found: str
name: str
number: int

# These would be dangerous. Reversing the order would be wrong.
### \\[*]: List[*]
### (*):Tuple[*]

[Return Patterns]

all(*): bool
len(*): int
str%(*): str
str.join(*): str
\bstr\b\+\bstr\b: str
\bstr\b\+\bcomments\b: str
tuple(*): Tuple(*)

[Post Return Patterns]

str[*]: str

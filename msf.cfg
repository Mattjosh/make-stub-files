
# A configuration file to make stubs for make_stub_files.py itself.

[Global]

files: make_stub_files.py
    
output_directory: .
    
prefix_lines:
    from typing import Any, Dict, Optional, Sequence, Tuple, Union
    # At present, I don't understand how to tell mypy about ast.Node
    # import ast
    # Node = ast.Node
    Node = Any

[Def Name Patterns]

# The returns are inherent in the design of make_stub_files.py:
AstFormatter.do_*: str
StubFormatter.do_*: str
StubTraverser.do_*: str

# Pattern.all_matches: Sequence
# Pattern.full_balanced_match: Optional[int]
# Pattern.match_balanced: int
# Pattern.match_entire_string: bool
# StandAloneMakeStubFile.scan_types: Dict[str, str]

# StubTraverser.format_returns: str
# StubTraverser.match_return_patterns: Tuple[bool,str]
# StubTraverser.match_return_pattern: Optional[str]
# StubTraverser.match_balanced: int

[General Patterns]

# Declarations of names..

a: str
aList: List
all(*): bool
controller: StandAloneMakeStubFile
find_s: str
fn: str
found: str
general_patterns: List[Pattern]
group: str
i1: int
i2: int
i: int
j1: int
j2: int
j: int
len(*): int
n1: int
n2: int
n: int
name: str
ndots: int
node: Node
number: int
os.sep.join(*): str
parser: optparse.OptionParser
patterns: List
repl_s: str
s: str
s1: str
s2: str
strict: bool
trace: bool
# Type computations...
int+int: int
int(*): int
hash(*): int
repr(*): str
str%(*): str
# str%Tuple[*]: str
# str%str: str
str%*: str
str+comments: str
str+str: str
str.join(*): str
str.join(*): str
str[*]: str
tuple(*): Tuple[*]
{*}: dict
(*): Tuple[*]
[*]: List[*]

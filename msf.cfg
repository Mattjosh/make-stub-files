
# A configuration file to make stubs for make_stub_files.py itself.

[Global]

files: make_stub_files.py
    
output_directory: .
    
prefix_lines:
    from typing import Any, Dict, Optional, Sequence, Tuple, Union
    # At present, I don't understand how to tell mypy about ast.Node
    # import ast
    # Node = ast.Node
    Node = Any

[Def Name Patterns]

AstFormatter.*: str
Pattern.all_matches: Sequence
Pattern.full_balanced_match: Optional[int]
Pattern.match_balanced: int
Pattern.match_entire_string: bool
StandAloneMakeStubFile.scan_types: Dict[str, str]
StubFormatter.do_.*: str
StubTraverser.format_returns: str
StubTraverser.match_return_patterns: Tuple[bool,str]
StubTraverser.match_return_pattern: Optional[str]
StubTraverser.match_balanced: int

[General Patterns]

a: str
aList: List
controller: StandAloneMakeStubFile
find_s: str
# fn: str
node: Node
parser: optparse.OptionParser
patterns: List
general_patterns: List[Pattern]
repl_s: str
strict: bool
trace: bool

a: str
aList: List
found: str
fn: str
group: str
i1: int
i2: int
i: int
j1: int
j2: int
j: int
n1: int
n2: int
n: int
name: str
ndots: int
s: str
s1: str
s2: str
# Was Call
all(*): bool
len(*): int
tuple(*): Tuple[*]
str.join(*): str
# Was Name...
number: int
# Was: return
(*): Tuple[*]
\\[*]: List[*]
{*}: dict
os.sep.join(*): str
str.join(*): str
str[*]: str
# Was +:
str\+str: str
str\+comments: str
# Was %:
str%str: str
str%(*): str
str%Tuple[*]: str
